// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteBook.DataAccess;

#nullable disable

namespace NoteBook.DataAccess.Migrations
{
    [DbContext(typeof(NoteBookDbContext))]
    partial class NoteBookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoteBook.Domain.Entites.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Juan",
                            LastName = "Ropero",
                            UserName = "JRopero"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Julian",
                            LastName = "Osorio",
                            UserName = "JOsorio"
                        });
                });

            modelBuilder.Entity("NoteBook.Domain.Entites.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Wash the car",
                            Title = "task-1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Content = "Wash the house",
                            Title = "task-2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Content = "buy roses",
                            Title = "task-3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Content = "buy pizzas",
                            Title = "task-4"
                        });
                });

            modelBuilder.Entity("NoteBook.Domain.Entites.Note", b =>
                {
                    b.HasOne("NoteBook.Domain.Entites.Author", "Author")
                        .WithMany("Notes")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("NoteBook.Domain.Entites.Author", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
